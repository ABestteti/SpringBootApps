package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.model.ProblemElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.springframework.validation.annotation.Validated;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * ProblemDetail
 */
@Validated
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-06-28T18:25:49.127268551Z[GMT]")


public class ProblemDetail   {
  @JsonProperty("detail")
  private String detail = null;

  @JsonProperty("elements")
  @Valid
  private List<ProblemElement> elements = null;

  @JsonProperty("instance")
  private String instance = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("type")
  private String type = null;

  public ProblemDetail detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human-readable explanation specific to this occurrence of the problem.
   * @return detail
   **/
  @Schema(example = "Error", description = "A human-readable explanation specific to this occurrence of the problem.")
      @NotNull

    public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }

  public ProblemDetail elements(List<ProblemElement> elements) {
    this.elements = elements;
    return this;
  }

  public ProblemDetail addElementsItem(ProblemElement elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<ProblemElement>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * Get elements
   * @return elements
   **/
  @Schema(description = "")
      @NotNull
    @Valid
    public List<ProblemElement> getElements() {
    return elements;
  }

  public void setElements(List<ProblemElement> elements) {
    this.elements = elements;
  }

  public ProblemDetail instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * @return instance
   **/
  @Schema(example = "/mcp/error/RF-IOC-001", description = "A URI reference that identifies the specific occurrence of the problem.")
      @NotNull

    public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }

  public ProblemDetail status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
   * @return status
   **/
  @Schema(example = "400", description = "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.")
      @NotNull

    public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ProblemDetail title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A short, human-readable summary of the problem type.
   * @return title
   **/
  @Schema(example = "Occupation error", description = "A short, human-readable summary of the problem type.")
      @NotNull

    public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ProblemDetail type(String type) {
    this.type = type;
    return this;
  }

  /**
   * A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be [about:blank].
   * @return type
   **/
  @Schema(example = "/mcp/error/RF-IOC-001", description = "A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be [about:blank].")
      @NotNull

    public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemDetail problemDetail = (ProblemDetail) o;
    return Objects.equals(this.detail, problemDetail.detail) &&
        Objects.equals(this.elements, problemDetail.elements) &&
        Objects.equals(this.instance, problemDetail.instance) &&
        Objects.equals(this.status, problemDetail.status) &&
        Objects.equals(this.title, problemDetail.title) &&
        Objects.equals(this.type, problemDetail.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, elements, instance, status, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemDetail {\n");
    
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
